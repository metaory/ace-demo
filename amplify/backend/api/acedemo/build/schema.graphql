type TestModel @aws_iam @aws_api_key {
  id: ID!
  name: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelTestModelConnection @aws_api_key @aws_iam {
  items: [TestModel]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelTestModelFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  and: [ModelTestModelFilterInput]
  or: [ModelTestModelFilterInput]
  not: ModelTestModelFilterInput
  _deleted: ModelBooleanInput
}

type Query {
  getTestModel(id: ID!): TestModel @aws_api_key @aws_iam
  listTestModels(filter: ModelTestModelFilterInput, limit: Int, nextToken: String): ModelTestModelConnection @aws_api_key @aws_iam
  syncTestModels(filter: ModelTestModelFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelTestModelConnection @aws_api_key @aws_iam
}

input ModelTestModelConditionInput {
  name: ModelStringInput
  and: [ModelTestModelConditionInput]
  or: [ModelTestModelConditionInput]
  not: ModelTestModelConditionInput
  _deleted: ModelBooleanInput
}

input CreateTestModelInput {
  id: ID
  name: String
  _version: Int
}

input UpdateTestModelInput {
  id: ID!
  name: String
  _version: Int
}

input DeleteTestModelInput {
  id: ID!
  _version: Int
}

type Mutation {
  createTestModel(input: CreateTestModelInput!, condition: ModelTestModelConditionInput): TestModel @aws_api_key @aws_iam
  updateTestModel(input: UpdateTestModelInput!, condition: ModelTestModelConditionInput): TestModel @aws_api_key @aws_iam
  deleteTestModel(input: DeleteTestModelInput!, condition: ModelTestModelConditionInput): TestModel @aws_api_key @aws_iam
}

input ModelSubscriptionTestModelFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  and: [ModelSubscriptionTestModelFilterInput]
  or: [ModelSubscriptionTestModelFilterInput]
  _deleted: ModelBooleanInput
}

type Subscription {
  onCreateTestModel(filter: ModelSubscriptionTestModelFilterInput): TestModel @aws_subscribe(mutations: ["createTestModel"]) @aws_api_key @aws_iam
  onUpdateTestModel(filter: ModelSubscriptionTestModelFilterInput): TestModel @aws_subscribe(mutations: ["updateTestModel"]) @aws_api_key @aws_iam
  onDeleteTestModel(filter: ModelSubscriptionTestModelFilterInput): TestModel @aws_subscribe(mutations: ["deleteTestModel"]) @aws_api_key @aws_iam
}
